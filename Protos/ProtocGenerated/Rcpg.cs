// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rcpg.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Rcpg {

  /// <summary>Holder for reflection information generated from rcpg.proto</summary>
  public static partial class RcpgReflection {

    #region Descriptor
    /// <summary>File descriptor for rcpg.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RcpgReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpyY3BnLnByb3RvEgRyY3BnIugBChdJbml0aWF0ZUNhcmRsZXNzUmVxdWVz",
            "dBIgCghwcm92aWRlchgBIAEoDjIOLnJjcGcuUHJvdmlkZXISEwoLcGF5bWVu",
            "dF9zdW0YAiABKAUSEAoIY3VycmVuY3kYAyABKAkSHAoGaW50ZW50GAQgASgO",
            "MgwucmNwZy5JbnRlbnQSEgoKcmV0dXJuX3VybBgFIAEoCRIZChFjYW5jZWxf",
            "cmV0dXJuX3VybBgGIAEoCRIcChRhbGxvd19ndWVzdF9jaGVja291dBgHIAEo",
            "CBIZCgVpdGVtcxgIIAMoCzIKLnJjcGcuSXRlbSK/AQoSUGF5U3RhbmRhcmRS",
            "ZXF1ZXN0EiAKCHByb3ZpZGVyGAEgASgOMg4ucmNwZy5Qcm92aWRlchITCgtw",
            "YXltZW50X3N1bRgCIAEoBRIQCghjdXJyZW5jeRgDIAEoCRInCgxwYXltZW50",
            "X2NhcmQYBCABKAsyES5yY3BnLlBheW1lbnRDYXJkEhwKBmludGVudBgFIAEo",
            "DjIMLnJjcGcuSW50ZW50EhkKBWl0ZW1zGAYgAygLMgoucmNwZy5JdGVtIqEB",
            "ChJQYXlDYXJkbGVzc1JlcXVlc3QSIAoIcHJvdmlkZXIYASABKA4yDi5yY3Bn",
            "LlByb3ZpZGVyEhMKC3BheW1lbnRfc3VtGAIgASgFEhAKCGN1cnJlbmN5GAMg",
            "ASgJEhIKCnBheW1lbnRfaWQYBCABKAkSEAoIcGF5ZXJfaWQYBSABKAkSHAoG",
            "aW50ZW50GAYgASgOMgwucmNwZy5JbnRlbnQibQoOQ2FwdHVyZVJlcXVlc3QS",
            "IAoIcHJvdmlkZXIYASABKA4yDi5yY3BnLlByb3ZpZGVyEhMKC3BheW1lbnRf",
            "c3VtGAIgASgFEhAKCGN1cnJlbmN5GAMgASgJEhIKCnBheW1lbnRfaWQYBCAB",
            "KAkibwoRR2V0RGV0YWlsc1JlcXVlc3QSIAoIcHJvdmlkZXIYASABKA4yDi5y",
            "Y3BnLlByb3ZpZGVyEhIKCmlkZW50aWZpZXIYAiABKAkSJAoHaWRfdHlwZRgD",
            "IAEoDjITLnJjcGcuUGF5bWVudElkVHlwZSKLAQoYSW5pdGlhdGVDYXJkbGVz",
            "c1Jlc3BvbnNlEioKDnBheW1lbnRfZXJyb3JzGAEgAygLMhIucmNwZy5QYXlt",
            "ZW50RXJyb3ISDQoFdG9rZW4YAiABKAkSHgoWY29uZmlybV9pbml0aWF0aW9u",
            "X3VybBgDIAEoCRIUCgxpbml0aWF0ZWRfb24YBCABKAkiYgoLUGF5UmVzcG9u",
            "c2USKgoOcGF5bWVudF9lcnJvcnMYASADKAsyEi5yY3BnLlBheW1lbnRFcnJv",
            "chISCgpwYXltZW50X2lkGAIgASgJEhMKC2V4ZWN1dGVkX29uGAMgASgJIkkK",
            "EkdldERldGFpbHNSZXNwb25zZRIiCgZlcnJvcnMYASADKAsyEi5yY3BnLlBh",
            "eW1lbnRFcnJvchIPCgdkZXRhaWxzGAIgASgJIoUBCgtQYXltZW50Q2FyZBIW",
            "Cg5wcmltYXJ5X251bWJlchgBIAEoCRISCgpmaXJzdF9uYW1lGAIgASgJEhEK",
            "CWxhc3RfbmFtZRgDIAEoCRINCgVtb250aBgEIAEoCRIMCgR5ZWFyGAUgASgF",
            "EhoKEnZlcmlmaWNhdGlvbl92YWx1ZRgGIAEoCSJLCgRJdGVtEgwKBG5hbWUY",
            "ASABKAkSEwoLZGVzY3JpcHRpb24YAiABKAkSEAoIcXVhbnRpdHkYAyABKAUS",
            "DgoGYW1vdW50GAQgASgFIjIKDFBheW1lbnRFcnJvchIOCgZzb3VyY2UYASAB",
            "KAkSEgoKZXJyb3JfY29kZRgCIAEoCSpOCghQcm92aWRlchIPCgtOT19QUk9W",
            "SURFUhAAEhgKFFBheXBhbEV4cHJlc3NHYXRld2F5EAESFwoTQXV0aG9yaXpl",
            "TmV0R2F0ZXdheRACKjgKBkludGVudBINCglOT19JTlRFTlQQABIMCghQVVJD",
            "SEFTRRABEhEKDUFVVEhPUklaQVRJT04QAipGCg1QYXltZW50SWRUeXBlEhYK",
            "Ek5PX0lERU5USUZJRVJfVFlQRRAAEgkKBVRPS0VOEAESEgoOVFJBTlNBQ1RJ",
            "T05fSUQQAjLUAgoSUGF5bWVudEdhdGV3YXlHcnBjElEKEEluaXRpYXRlQ2Fy",
            "ZGxlc3MSHS5yY3BnLkluaXRpYXRlQ2FyZGxlc3NSZXF1ZXN0Gh4ucmNwZy5J",
            "bml0aWF0ZUNhcmRsZXNzUmVzcG9uc2USOgoLUGF5U3RhbmRhcmQSGC5yY3Bn",
            "LlBheVN0YW5kYXJkUmVxdWVzdBoRLnJjcGcuUGF5UmVzcG9uc2USOgoLUGF5",
            "Q2FyZGxlc3MSGC5yY3BnLlBheUNhcmRsZXNzUmVxdWVzdBoRLnJjcGcuUGF5",
            "UmVzcG9uc2USMgoHQ2FwdHVyZRIULnJjcGcuQ2FwdHVyZVJlcXVlc3QaES5y",
            "Y3BnLlBheVJlc3BvbnNlEj8KCkdldERldGFpbHMSFy5yY3BnLkdldERldGFp",
            "bHNSZXF1ZXN0GhgucmNwZy5HZXREZXRhaWxzUmVzcG9uc2ViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Rcpg.Provider), typeof(global::Rcpg.Intent), typeof(global::Rcpg.PaymentIdType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Rcpg.InitiateCardlessRequest), global::Rcpg.InitiateCardlessRequest.Parser, new[]{ "Provider", "PaymentSum", "Currency", "Intent", "ReturnUrl", "CancelReturnUrl", "AllowGuestCheckout", "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rcpg.PayStandardRequest), global::Rcpg.PayStandardRequest.Parser, new[]{ "Provider", "PaymentSum", "Currency", "PaymentCard", "Intent", "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rcpg.PayCardlessRequest), global::Rcpg.PayCardlessRequest.Parser, new[]{ "Provider", "PaymentSum", "Currency", "PaymentId", "PayerId", "Intent" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rcpg.CaptureRequest), global::Rcpg.CaptureRequest.Parser, new[]{ "Provider", "PaymentSum", "Currency", "PaymentId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rcpg.GetDetailsRequest), global::Rcpg.GetDetailsRequest.Parser, new[]{ "Provider", "Identifier", "IdType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rcpg.InitiateCardlessResponse), global::Rcpg.InitiateCardlessResponse.Parser, new[]{ "PaymentErrors", "Token", "ConfirmInitiationUrl", "InitiatedOn" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rcpg.PayResponse), global::Rcpg.PayResponse.Parser, new[]{ "PaymentErrors", "PaymentId", "ExecutedOn" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rcpg.GetDetailsResponse), global::Rcpg.GetDetailsResponse.Parser, new[]{ "Errors", "Details" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rcpg.PaymentCard), global::Rcpg.PaymentCard.Parser, new[]{ "PrimaryNumber", "FirstName", "LastName", "Month", "Year", "VerificationValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rcpg.Item), global::Rcpg.Item.Parser, new[]{ "Name", "Description", "Quantity", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rcpg.PaymentError), global::Rcpg.PaymentError.Parser, new[]{ "Source", "ErrorCode" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Possible service providers. Provider names must be exactly as in config.yml.
  /// </summary>
  public enum Provider {
    [pbr::OriginalName("NO_PROVIDER")] NoProvider = 0,
    [pbr::OriginalName("PaypalExpressGateway")] PaypalExpressGateway = 1,
    [pbr::OriginalName("AuthorizeNetGateway")] AuthorizeNetGateway = 2,
  }

  /// <summary>
  /// Possible payment intents.
  /// </summary>
  public enum Intent {
    [pbr::OriginalName("NO_INTENT")] NoIntent = 0,
    [pbr::OriginalName("PURCHASE")] Purchase = 1,
    [pbr::OriginalName("AUTHORIZATION")] Authorization = 2,
  }

  /// <summary>
  /// Possible payment identifiers.
  /// </summary>
  public enum PaymentIdType {
    [pbr::OriginalName("NO_IDENTIFIER_TYPE")] NoIdentifierType = 0,
    [pbr::OriginalName("TOKEN")] Token = 1,
    [pbr::OriginalName("TRANSACTION_ID")] TransactionId = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Request object for initiation procedure call.
  /// </summary>
  public sealed partial class InitiateCardlessRequest : pb::IMessage<InitiateCardlessRequest> {
    private static readonly pb::MessageParser<InitiateCardlessRequest> _parser = new pb::MessageParser<InitiateCardlessRequest>(() => new InitiateCardlessRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitiateCardlessRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rcpg.RcpgReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitiateCardlessRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitiateCardlessRequest(InitiateCardlessRequest other) : this() {
      provider_ = other.provider_;
      paymentSum_ = other.paymentSum_;
      currency_ = other.currency_;
      intent_ = other.intent_;
      returnUrl_ = other.returnUrl_;
      cancelReturnUrl_ = other.cancelReturnUrl_;
      allowGuestCheckout_ = other.allowGuestCheckout_;
      items_ = other.items_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitiateCardlessRequest Clone() {
      return new InitiateCardlessRequest(this);
    }

    /// <summary>Field number for the "provider" field.</summary>
    public const int ProviderFieldNumber = 1;
    private global::Rcpg.Provider provider_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rcpg.Provider Provider {
      get { return provider_; }
      set {
        provider_ = value;
      }
    }

    /// <summary>Field number for the "payment_sum" field.</summary>
    public const int PaymentSumFieldNumber = 2;
    private int paymentSum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PaymentSum {
      get { return paymentSum_; }
      set {
        paymentSum_ = value;
      }
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 3;
    private string currency_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "intent" field.</summary>
    public const int IntentFieldNumber = 4;
    private global::Rcpg.Intent intent_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rcpg.Intent Intent {
      get { return intent_; }
      set {
        intent_ = value;
      }
    }

    /// <summary>Field number for the "return_url" field.</summary>
    public const int ReturnUrlFieldNumber = 5;
    private string returnUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReturnUrl {
      get { return returnUrl_; }
      set {
        returnUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cancel_return_url" field.</summary>
    public const int CancelReturnUrlFieldNumber = 6;
    private string cancelReturnUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CancelReturnUrl {
      get { return cancelReturnUrl_; }
      set {
        cancelReturnUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "allow_guest_checkout" field.</summary>
    public const int AllowGuestCheckoutFieldNumber = 7;
    private bool allowGuestCheckout_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllowGuestCheckout {
      get { return allowGuestCheckout_; }
      set {
        allowGuestCheckout_ = value;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Rcpg.Item> _repeated_items_codec
        = pb::FieldCodec.ForMessage(66, global::Rcpg.Item.Parser);
    private readonly pbc::RepeatedField<global::Rcpg.Item> items_ = new pbc::RepeatedField<global::Rcpg.Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Rcpg.Item> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitiateCardlessRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitiateCardlessRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Provider != other.Provider) return false;
      if (PaymentSum != other.PaymentSum) return false;
      if (Currency != other.Currency) return false;
      if (Intent != other.Intent) return false;
      if (ReturnUrl != other.ReturnUrl) return false;
      if (CancelReturnUrl != other.CancelReturnUrl) return false;
      if (AllowGuestCheckout != other.AllowGuestCheckout) return false;
      if(!items_.Equals(other.items_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Provider != 0) hash ^= Provider.GetHashCode();
      if (PaymentSum != 0) hash ^= PaymentSum.GetHashCode();
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      if (Intent != 0) hash ^= Intent.GetHashCode();
      if (ReturnUrl.Length != 0) hash ^= ReturnUrl.GetHashCode();
      if (CancelReturnUrl.Length != 0) hash ^= CancelReturnUrl.GetHashCode();
      if (AllowGuestCheckout != false) hash ^= AllowGuestCheckout.GetHashCode();
      hash ^= items_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Provider != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Provider);
      }
      if (PaymentSum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PaymentSum);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Currency);
      }
      if (Intent != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Intent);
      }
      if (ReturnUrl.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ReturnUrl);
      }
      if (CancelReturnUrl.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CancelReturnUrl);
      }
      if (AllowGuestCheckout != false) {
        output.WriteRawTag(56);
        output.WriteBool(AllowGuestCheckout);
      }
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Provider != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Provider);
      }
      if (PaymentSum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PaymentSum);
      }
      if (Currency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (Intent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Intent);
      }
      if (ReturnUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReturnUrl);
      }
      if (CancelReturnUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CancelReturnUrl);
      }
      if (AllowGuestCheckout != false) {
        size += 1 + 1;
      }
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitiateCardlessRequest other) {
      if (other == null) {
        return;
      }
      if (other.Provider != 0) {
        Provider = other.Provider;
      }
      if (other.PaymentSum != 0) {
        PaymentSum = other.PaymentSum;
      }
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
      if (other.Intent != 0) {
        Intent = other.Intent;
      }
      if (other.ReturnUrl.Length != 0) {
        ReturnUrl = other.ReturnUrl;
      }
      if (other.CancelReturnUrl.Length != 0) {
        CancelReturnUrl = other.CancelReturnUrl;
      }
      if (other.AllowGuestCheckout != false) {
        AllowGuestCheckout = other.AllowGuestCheckout;
      }
      items_.Add(other.items_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            provider_ = (global::Rcpg.Provider) input.ReadEnum();
            break;
          }
          case 16: {
            PaymentSum = input.ReadInt32();
            break;
          }
          case 26: {
            Currency = input.ReadString();
            break;
          }
          case 32: {
            intent_ = (global::Rcpg.Intent) input.ReadEnum();
            break;
          }
          case 42: {
            ReturnUrl = input.ReadString();
            break;
          }
          case 50: {
            CancelReturnUrl = input.ReadString();
            break;
          }
          case 56: {
            AllowGuestCheckout = input.ReadBool();
            break;
          }
          case 66: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request object for authorization or purchase call for standard payment.
  /// </summary>
  public sealed partial class PayStandardRequest : pb::IMessage<PayStandardRequest> {
    private static readonly pb::MessageParser<PayStandardRequest> _parser = new pb::MessageParser<PayStandardRequest>(() => new PayStandardRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PayStandardRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rcpg.RcpgReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayStandardRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayStandardRequest(PayStandardRequest other) : this() {
      provider_ = other.provider_;
      paymentSum_ = other.paymentSum_;
      currency_ = other.currency_;
      PaymentCard = other.paymentCard_ != null ? other.PaymentCard.Clone() : null;
      intent_ = other.intent_;
      items_ = other.items_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayStandardRequest Clone() {
      return new PayStandardRequest(this);
    }

    /// <summary>Field number for the "provider" field.</summary>
    public const int ProviderFieldNumber = 1;
    private global::Rcpg.Provider provider_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rcpg.Provider Provider {
      get { return provider_; }
      set {
        provider_ = value;
      }
    }

    /// <summary>Field number for the "payment_sum" field.</summary>
    public const int PaymentSumFieldNumber = 2;
    private int paymentSum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PaymentSum {
      get { return paymentSum_; }
      set {
        paymentSum_ = value;
      }
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 3;
    private string currency_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payment_card" field.</summary>
    public const int PaymentCardFieldNumber = 4;
    private global::Rcpg.PaymentCard paymentCard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rcpg.PaymentCard PaymentCard {
      get { return paymentCard_; }
      set {
        paymentCard_ = value;
      }
    }

    /// <summary>Field number for the "intent" field.</summary>
    public const int IntentFieldNumber = 5;
    private global::Rcpg.Intent intent_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rcpg.Intent Intent {
      get { return intent_; }
      set {
        intent_ = value;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Rcpg.Item> _repeated_items_codec
        = pb::FieldCodec.ForMessage(50, global::Rcpg.Item.Parser);
    private readonly pbc::RepeatedField<global::Rcpg.Item> items_ = new pbc::RepeatedField<global::Rcpg.Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Rcpg.Item> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PayStandardRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PayStandardRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Provider != other.Provider) return false;
      if (PaymentSum != other.PaymentSum) return false;
      if (Currency != other.Currency) return false;
      if (!object.Equals(PaymentCard, other.PaymentCard)) return false;
      if (Intent != other.Intent) return false;
      if(!items_.Equals(other.items_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Provider != 0) hash ^= Provider.GetHashCode();
      if (PaymentSum != 0) hash ^= PaymentSum.GetHashCode();
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      if (paymentCard_ != null) hash ^= PaymentCard.GetHashCode();
      if (Intent != 0) hash ^= Intent.GetHashCode();
      hash ^= items_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Provider != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Provider);
      }
      if (PaymentSum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PaymentSum);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Currency);
      }
      if (paymentCard_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PaymentCard);
      }
      if (Intent != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Intent);
      }
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Provider != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Provider);
      }
      if (PaymentSum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PaymentSum);
      }
      if (Currency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (paymentCard_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PaymentCard);
      }
      if (Intent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Intent);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PayStandardRequest other) {
      if (other == null) {
        return;
      }
      if (other.Provider != 0) {
        Provider = other.Provider;
      }
      if (other.PaymentSum != 0) {
        PaymentSum = other.PaymentSum;
      }
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
      if (other.paymentCard_ != null) {
        if (paymentCard_ == null) {
          paymentCard_ = new global::Rcpg.PaymentCard();
        }
        PaymentCard.MergeFrom(other.PaymentCard);
      }
      if (other.Intent != 0) {
        Intent = other.Intent;
      }
      items_.Add(other.items_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            provider_ = (global::Rcpg.Provider) input.ReadEnum();
            break;
          }
          case 16: {
            PaymentSum = input.ReadInt32();
            break;
          }
          case 26: {
            Currency = input.ReadString();
            break;
          }
          case 34: {
            if (paymentCard_ == null) {
              paymentCard_ = new global::Rcpg.PaymentCard();
            }
            input.ReadMessage(paymentCard_);
            break;
          }
          case 40: {
            intent_ = (global::Rcpg.Intent) input.ReadEnum();
            break;
          }
          case 50: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request object for authorization or purchase call for cardless payment.
  /// </summary>
  public sealed partial class PayCardlessRequest : pb::IMessage<PayCardlessRequest> {
    private static readonly pb::MessageParser<PayCardlessRequest> _parser = new pb::MessageParser<PayCardlessRequest>(() => new PayCardlessRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PayCardlessRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rcpg.RcpgReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayCardlessRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayCardlessRequest(PayCardlessRequest other) : this() {
      provider_ = other.provider_;
      paymentSum_ = other.paymentSum_;
      currency_ = other.currency_;
      paymentId_ = other.paymentId_;
      payerId_ = other.payerId_;
      intent_ = other.intent_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayCardlessRequest Clone() {
      return new PayCardlessRequest(this);
    }

    /// <summary>Field number for the "provider" field.</summary>
    public const int ProviderFieldNumber = 1;
    private global::Rcpg.Provider provider_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rcpg.Provider Provider {
      get { return provider_; }
      set {
        provider_ = value;
      }
    }

    /// <summary>Field number for the "payment_sum" field.</summary>
    public const int PaymentSumFieldNumber = 2;
    private int paymentSum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PaymentSum {
      get { return paymentSum_; }
      set {
        paymentSum_ = value;
      }
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 3;
    private string currency_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payment_id" field.</summary>
    public const int PaymentIdFieldNumber = 4;
    private string paymentId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PaymentId {
      get { return paymentId_; }
      set {
        paymentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payer_id" field.</summary>
    public const int PayerIdFieldNumber = 5;
    private string payerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PayerId {
      get { return payerId_; }
      set {
        payerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "intent" field.</summary>
    public const int IntentFieldNumber = 6;
    private global::Rcpg.Intent intent_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rcpg.Intent Intent {
      get { return intent_; }
      set {
        intent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PayCardlessRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PayCardlessRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Provider != other.Provider) return false;
      if (PaymentSum != other.PaymentSum) return false;
      if (Currency != other.Currency) return false;
      if (PaymentId != other.PaymentId) return false;
      if (PayerId != other.PayerId) return false;
      if (Intent != other.Intent) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Provider != 0) hash ^= Provider.GetHashCode();
      if (PaymentSum != 0) hash ^= PaymentSum.GetHashCode();
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      if (PaymentId.Length != 0) hash ^= PaymentId.GetHashCode();
      if (PayerId.Length != 0) hash ^= PayerId.GetHashCode();
      if (Intent != 0) hash ^= Intent.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Provider != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Provider);
      }
      if (PaymentSum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PaymentSum);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Currency);
      }
      if (PaymentId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PaymentId);
      }
      if (PayerId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PayerId);
      }
      if (Intent != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Intent);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Provider != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Provider);
      }
      if (PaymentSum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PaymentSum);
      }
      if (Currency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (PaymentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaymentId);
      }
      if (PayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PayerId);
      }
      if (Intent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Intent);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PayCardlessRequest other) {
      if (other == null) {
        return;
      }
      if (other.Provider != 0) {
        Provider = other.Provider;
      }
      if (other.PaymentSum != 0) {
        PaymentSum = other.PaymentSum;
      }
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
      if (other.PaymentId.Length != 0) {
        PaymentId = other.PaymentId;
      }
      if (other.PayerId.Length != 0) {
        PayerId = other.PayerId;
      }
      if (other.Intent != 0) {
        Intent = other.Intent;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            provider_ = (global::Rcpg.Provider) input.ReadEnum();
            break;
          }
          case 16: {
            PaymentSum = input.ReadInt32();
            break;
          }
          case 26: {
            Currency = input.ReadString();
            break;
          }
          case 34: {
            PaymentId = input.ReadString();
            break;
          }
          case 42: {
            PayerId = input.ReadString();
            break;
          }
          case 48: {
            intent_ = (global::Rcpg.Intent) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request object for capture call for both standard and cardless payments.
  /// </summary>
  public sealed partial class CaptureRequest : pb::IMessage<CaptureRequest> {
    private static readonly pb::MessageParser<CaptureRequest> _parser = new pb::MessageParser<CaptureRequest>(() => new CaptureRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CaptureRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rcpg.RcpgReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CaptureRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CaptureRequest(CaptureRequest other) : this() {
      provider_ = other.provider_;
      paymentSum_ = other.paymentSum_;
      currency_ = other.currency_;
      paymentId_ = other.paymentId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CaptureRequest Clone() {
      return new CaptureRequest(this);
    }

    /// <summary>Field number for the "provider" field.</summary>
    public const int ProviderFieldNumber = 1;
    private global::Rcpg.Provider provider_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rcpg.Provider Provider {
      get { return provider_; }
      set {
        provider_ = value;
      }
    }

    /// <summary>Field number for the "payment_sum" field.</summary>
    public const int PaymentSumFieldNumber = 2;
    private int paymentSum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PaymentSum {
      get { return paymentSum_; }
      set {
        paymentSum_ = value;
      }
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 3;
    private string currency_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payment_id" field.</summary>
    public const int PaymentIdFieldNumber = 4;
    private string paymentId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PaymentId {
      get { return paymentId_; }
      set {
        paymentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CaptureRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CaptureRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Provider != other.Provider) return false;
      if (PaymentSum != other.PaymentSum) return false;
      if (Currency != other.Currency) return false;
      if (PaymentId != other.PaymentId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Provider != 0) hash ^= Provider.GetHashCode();
      if (PaymentSum != 0) hash ^= PaymentSum.GetHashCode();
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      if (PaymentId.Length != 0) hash ^= PaymentId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Provider != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Provider);
      }
      if (PaymentSum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PaymentSum);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Currency);
      }
      if (PaymentId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PaymentId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Provider != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Provider);
      }
      if (PaymentSum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PaymentSum);
      }
      if (Currency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (PaymentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaymentId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CaptureRequest other) {
      if (other == null) {
        return;
      }
      if (other.Provider != 0) {
        Provider = other.Provider;
      }
      if (other.PaymentSum != 0) {
        PaymentSum = other.PaymentSum;
      }
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
      if (other.PaymentId.Length != 0) {
        PaymentId = other.PaymentId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            provider_ = (global::Rcpg.Provider) input.ReadEnum();
            break;
          }
          case 16: {
            PaymentSum = input.ReadInt32();
            break;
          }
          case 26: {
            Currency = input.ReadString();
            break;
          }
          case 34: {
            PaymentId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request object for getting payment details.
  /// </summary>
  public sealed partial class GetDetailsRequest : pb::IMessage<GetDetailsRequest> {
    private static readonly pb::MessageParser<GetDetailsRequest> _parser = new pb::MessageParser<GetDetailsRequest>(() => new GetDetailsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetDetailsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rcpg.RcpgReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDetailsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDetailsRequest(GetDetailsRequest other) : this() {
      provider_ = other.provider_;
      identifier_ = other.identifier_;
      idType_ = other.idType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDetailsRequest Clone() {
      return new GetDetailsRequest(this);
    }

    /// <summary>Field number for the "provider" field.</summary>
    public const int ProviderFieldNumber = 1;
    private global::Rcpg.Provider provider_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rcpg.Provider Provider {
      get { return provider_; }
      set {
        provider_ = value;
      }
    }

    /// <summary>Field number for the "identifier" field.</summary>
    public const int IdentifierFieldNumber = 2;
    private string identifier_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Identifier {
      get { return identifier_; }
      set {
        identifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id_type" field.</summary>
    public const int IdTypeFieldNumber = 3;
    private global::Rcpg.PaymentIdType idType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rcpg.PaymentIdType IdType {
      get { return idType_; }
      set {
        idType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetDetailsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetDetailsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Provider != other.Provider) return false;
      if (Identifier != other.Identifier) return false;
      if (IdType != other.IdType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Provider != 0) hash ^= Provider.GetHashCode();
      if (Identifier.Length != 0) hash ^= Identifier.GetHashCode();
      if (IdType != 0) hash ^= IdType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Provider != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Provider);
      }
      if (Identifier.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Identifier);
      }
      if (IdType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) IdType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Provider != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Provider);
      }
      if (Identifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Identifier);
      }
      if (IdType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IdType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetDetailsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Provider != 0) {
        Provider = other.Provider;
      }
      if (other.Identifier.Length != 0) {
        Identifier = other.Identifier;
      }
      if (other.IdType != 0) {
        IdType = other.IdType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            provider_ = (global::Rcpg.Provider) input.ReadEnum();
            break;
          }
          case 18: {
            Identifier = input.ReadString();
            break;
          }
          case 24: {
            idType_ = (global::Rcpg.PaymentIdType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response object for initiation procedure call.
  /// </summary>
  public sealed partial class InitiateCardlessResponse : pb::IMessage<InitiateCardlessResponse> {
    private static readonly pb::MessageParser<InitiateCardlessResponse> _parser = new pb::MessageParser<InitiateCardlessResponse>(() => new InitiateCardlessResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitiateCardlessResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rcpg.RcpgReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitiateCardlessResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitiateCardlessResponse(InitiateCardlessResponse other) : this() {
      paymentErrors_ = other.paymentErrors_.Clone();
      token_ = other.token_;
      confirmInitiationUrl_ = other.confirmInitiationUrl_;
      initiatedOn_ = other.initiatedOn_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitiateCardlessResponse Clone() {
      return new InitiateCardlessResponse(this);
    }

    /// <summary>Field number for the "payment_errors" field.</summary>
    public const int PaymentErrorsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Rcpg.PaymentError> _repeated_paymentErrors_codec
        = pb::FieldCodec.ForMessage(10, global::Rcpg.PaymentError.Parser);
    private readonly pbc::RepeatedField<global::Rcpg.PaymentError> paymentErrors_ = new pbc::RepeatedField<global::Rcpg.PaymentError>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Rcpg.PaymentError> PaymentErrors {
      get { return paymentErrors_; }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 2;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "confirm_initiation_url" field.</summary>
    public const int ConfirmInitiationUrlFieldNumber = 3;
    private string confirmInitiationUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConfirmInitiationUrl {
      get { return confirmInitiationUrl_; }
      set {
        confirmInitiationUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "initiated_on" field.</summary>
    public const int InitiatedOnFieldNumber = 4;
    private string initiatedOn_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InitiatedOn {
      get { return initiatedOn_; }
      set {
        initiatedOn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitiateCardlessResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitiateCardlessResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!paymentErrors_.Equals(other.paymentErrors_)) return false;
      if (Token != other.Token) return false;
      if (ConfirmInitiationUrl != other.ConfirmInitiationUrl) return false;
      if (InitiatedOn != other.InitiatedOn) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= paymentErrors_.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (ConfirmInitiationUrl.Length != 0) hash ^= ConfirmInitiationUrl.GetHashCode();
      if (InitiatedOn.Length != 0) hash ^= InitiatedOn.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      paymentErrors_.WriteTo(output, _repeated_paymentErrors_codec);
      if (Token.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
      if (ConfirmInitiationUrl.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ConfirmInitiationUrl);
      }
      if (InitiatedOn.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(InitiatedOn);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += paymentErrors_.CalculateSize(_repeated_paymentErrors_codec);
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (ConfirmInitiationUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConfirmInitiationUrl);
      }
      if (InitiatedOn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InitiatedOn);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitiateCardlessResponse other) {
      if (other == null) {
        return;
      }
      paymentErrors_.Add(other.paymentErrors_);
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.ConfirmInitiationUrl.Length != 0) {
        ConfirmInitiationUrl = other.ConfirmInitiationUrl;
      }
      if (other.InitiatedOn.Length != 0) {
        InitiatedOn = other.InitiatedOn;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            paymentErrors_.AddEntriesFrom(input, _repeated_paymentErrors_codec);
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
          case 26: {
            ConfirmInitiationUrl = input.ReadString();
            break;
          }
          case 34: {
            InitiatedOn = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Unified response object for authorization, purchase and capture calls
  /// for both standard and cardless payments.
  /// </summary>
  public sealed partial class PayResponse : pb::IMessage<PayResponse> {
    private static readonly pb::MessageParser<PayResponse> _parser = new pb::MessageParser<PayResponse>(() => new PayResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PayResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rcpg.RcpgReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayResponse(PayResponse other) : this() {
      paymentErrors_ = other.paymentErrors_.Clone();
      paymentId_ = other.paymentId_;
      executedOn_ = other.executedOn_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayResponse Clone() {
      return new PayResponse(this);
    }

    /// <summary>Field number for the "payment_errors" field.</summary>
    public const int PaymentErrorsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Rcpg.PaymentError> _repeated_paymentErrors_codec
        = pb::FieldCodec.ForMessage(10, global::Rcpg.PaymentError.Parser);
    private readonly pbc::RepeatedField<global::Rcpg.PaymentError> paymentErrors_ = new pbc::RepeatedField<global::Rcpg.PaymentError>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Rcpg.PaymentError> PaymentErrors {
      get { return paymentErrors_; }
    }

    /// <summary>Field number for the "payment_id" field.</summary>
    public const int PaymentIdFieldNumber = 2;
    private string paymentId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PaymentId {
      get { return paymentId_; }
      set {
        paymentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "executed_on" field.</summary>
    public const int ExecutedOnFieldNumber = 3;
    private string executedOn_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExecutedOn {
      get { return executedOn_; }
      set {
        executedOn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PayResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PayResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!paymentErrors_.Equals(other.paymentErrors_)) return false;
      if (PaymentId != other.PaymentId) return false;
      if (ExecutedOn != other.ExecutedOn) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= paymentErrors_.GetHashCode();
      if (PaymentId.Length != 0) hash ^= PaymentId.GetHashCode();
      if (ExecutedOn.Length != 0) hash ^= ExecutedOn.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      paymentErrors_.WriteTo(output, _repeated_paymentErrors_codec);
      if (PaymentId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PaymentId);
      }
      if (ExecutedOn.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ExecutedOn);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += paymentErrors_.CalculateSize(_repeated_paymentErrors_codec);
      if (PaymentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaymentId);
      }
      if (ExecutedOn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExecutedOn);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PayResponse other) {
      if (other == null) {
        return;
      }
      paymentErrors_.Add(other.paymentErrors_);
      if (other.PaymentId.Length != 0) {
        PaymentId = other.PaymentId;
      }
      if (other.ExecutedOn.Length != 0) {
        ExecutedOn = other.ExecutedOn;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            paymentErrors_.AddEntriesFrom(input, _repeated_paymentErrors_codec);
            break;
          }
          case 18: {
            PaymentId = input.ReadString();
            break;
          }
          case 26: {
            ExecutedOn = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response object for payment details.
  /// </summary>
  public sealed partial class GetDetailsResponse : pb::IMessage<GetDetailsResponse> {
    private static readonly pb::MessageParser<GetDetailsResponse> _parser = new pb::MessageParser<GetDetailsResponse>(() => new GetDetailsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetDetailsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rcpg.RcpgReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDetailsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDetailsResponse(GetDetailsResponse other) : this() {
      errors_ = other.errors_.Clone();
      details_ = other.details_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDetailsResponse Clone() {
      return new GetDetailsResponse(this);
    }

    /// <summary>Field number for the "errors" field.</summary>
    public const int ErrorsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Rcpg.PaymentError> _repeated_errors_codec
        = pb::FieldCodec.ForMessage(10, global::Rcpg.PaymentError.Parser);
    private readonly pbc::RepeatedField<global::Rcpg.PaymentError> errors_ = new pbc::RepeatedField<global::Rcpg.PaymentError>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Rcpg.PaymentError> Errors {
      get { return errors_; }
    }

    /// <summary>Field number for the "details" field.</summary>
    public const int DetailsFieldNumber = 2;
    private string details_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Details {
      get { return details_; }
      set {
        details_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetDetailsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetDetailsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!errors_.Equals(other.errors_)) return false;
      if (Details != other.Details) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= errors_.GetHashCode();
      if (Details.Length != 0) hash ^= Details.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      errors_.WriteTo(output, _repeated_errors_codec);
      if (Details.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Details);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += errors_.CalculateSize(_repeated_errors_codec);
      if (Details.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Details);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetDetailsResponse other) {
      if (other == null) {
        return;
      }
      errors_.Add(other.errors_);
      if (other.Details.Length != 0) {
        Details = other.Details;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            errors_.AddEntriesFrom(input, _repeated_errors_codec);
            break;
          }
          case 18: {
            Details = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Used for building ActiveMerchant::Billing::CreditCard instance.
  /// </summary>
  public sealed partial class PaymentCard : pb::IMessage<PaymentCard> {
    private static readonly pb::MessageParser<PaymentCard> _parser = new pb::MessageParser<PaymentCard>(() => new PaymentCard());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PaymentCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rcpg.RcpgReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaymentCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaymentCard(PaymentCard other) : this() {
      primaryNumber_ = other.primaryNumber_;
      firstName_ = other.firstName_;
      lastName_ = other.lastName_;
      month_ = other.month_;
      year_ = other.year_;
      verificationValue_ = other.verificationValue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaymentCard Clone() {
      return new PaymentCard(this);
    }

    /// <summary>Field number for the "primary_number" field.</summary>
    public const int PrimaryNumberFieldNumber = 1;
    private string primaryNumber_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrimaryNumber {
      get { return primaryNumber_; }
      set {
        primaryNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "first_name" field.</summary>
    public const int FirstNameFieldNumber = 2;
    private string firstName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FirstName {
      get { return firstName_; }
      set {
        firstName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last_name" field.</summary>
    public const int LastNameFieldNumber = 3;
    private string lastName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastName {
      get { return lastName_; }
      set {
        lastName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "month" field.</summary>
    public const int MonthFieldNumber = 4;
    private string month_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Month {
      get { return month_; }
      set {
        month_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "year" field.</summary>
    public const int YearFieldNumber = 5;
    private int year_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Year {
      get { return year_; }
      set {
        year_ = value;
      }
    }

    /// <summary>Field number for the "verification_value" field.</summary>
    public const int VerificationValueFieldNumber = 6;
    private string verificationValue_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VerificationValue {
      get { return verificationValue_; }
      set {
        verificationValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PaymentCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PaymentCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PrimaryNumber != other.PrimaryNumber) return false;
      if (FirstName != other.FirstName) return false;
      if (LastName != other.LastName) return false;
      if (Month != other.Month) return false;
      if (Year != other.Year) return false;
      if (VerificationValue != other.VerificationValue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PrimaryNumber.Length != 0) hash ^= PrimaryNumber.GetHashCode();
      if (FirstName.Length != 0) hash ^= FirstName.GetHashCode();
      if (LastName.Length != 0) hash ^= LastName.GetHashCode();
      if (Month.Length != 0) hash ^= Month.GetHashCode();
      if (Year != 0) hash ^= Year.GetHashCode();
      if (VerificationValue.Length != 0) hash ^= VerificationValue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PrimaryNumber.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PrimaryNumber);
      }
      if (FirstName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FirstName);
      }
      if (LastName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(LastName);
      }
      if (Month.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Month);
      }
      if (Year != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Year);
      }
      if (VerificationValue.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(VerificationValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PrimaryNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrimaryNumber);
      }
      if (FirstName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirstName);
      }
      if (LastName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LastName);
      }
      if (Month.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Month);
      }
      if (Year != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Year);
      }
      if (VerificationValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VerificationValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PaymentCard other) {
      if (other == null) {
        return;
      }
      if (other.PrimaryNumber.Length != 0) {
        PrimaryNumber = other.PrimaryNumber;
      }
      if (other.FirstName.Length != 0) {
        FirstName = other.FirstName;
      }
      if (other.LastName.Length != 0) {
        LastName = other.LastName;
      }
      if (other.Month.Length != 0) {
        Month = other.Month;
      }
      if (other.Year != 0) {
        Year = other.Year;
      }
      if (other.VerificationValue.Length != 0) {
        VerificationValue = other.VerificationValue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PrimaryNumber = input.ReadString();
            break;
          }
          case 18: {
            FirstName = input.ReadString();
            break;
          }
          case 26: {
            LastName = input.ReadString();
            break;
          }
          case 34: {
            Month = input.ReadString();
            break;
          }
          case 40: {
            Year = input.ReadInt32();
            break;
          }
          case 50: {
            VerificationValue = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Represents purchased item. Not all providers support this.
  /// </summary>
  public sealed partial class Item : pb::IMessage<Item> {
    private static readonly pb::MessageParser<Item> _parser = new pb::MessageParser<Item>(() => new Item());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Item> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rcpg.RcpgReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Item() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Item(Item other) : this() {
      name_ = other.name_;
      description_ = other.description_;
      quantity_ = other.quantity_;
      amount_ = other.amount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Item Clone() {
      return new Item(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 3;
    private int quantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 4;
    private int amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Item);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Item other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (Quantity != other.Quantity) return false;
      if (Amount != other.Amount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Quantity != 0) hash ^= Quantity.GetHashCode();
      if (Amount != 0) hash ^= Amount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (Quantity != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Quantity);
      }
      if (Amount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Amount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Quantity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quantity);
      }
      if (Amount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Item other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Quantity != 0) {
        Quantity = other.Quantity;
      }
      if (other.Amount != 0) {
        Amount = other.Amount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 24: {
            Quantity = input.ReadInt32();
            break;
          }
          case 32: {
            Amount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Error details.
  /// </summary>
  public sealed partial class PaymentError : pb::IMessage<PaymentError> {
    private static readonly pb::MessageParser<PaymentError> _parser = new pb::MessageParser<PaymentError>(() => new PaymentError());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PaymentError> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rcpg.RcpgReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaymentError() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaymentError(PaymentError other) : this() {
      source_ = other.source_;
      errorCode_ = other.errorCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaymentError Clone() {
      return new PaymentError(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private string source_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Source {
      get { return source_; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "error_code" field.</summary>
    public const int ErrorCodeFieldNumber = 2;
    private string errorCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PaymentError);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PaymentError other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Source != other.Source) return false;
      if (ErrorCode != other.ErrorCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Source.Length != 0) hash ^= Source.GetHashCode();
      if (ErrorCode.Length != 0) hash ^= ErrorCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Source.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Source);
      }
      if (ErrorCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ErrorCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Source.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      if (ErrorCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PaymentError other) {
      if (other == null) {
        return;
      }
      if (other.Source.Length != 0) {
        Source = other.Source;
      }
      if (other.ErrorCode.Length != 0) {
        ErrorCode = other.ErrorCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Source = input.ReadString();
            break;
          }
          case 18: {
            ErrorCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
